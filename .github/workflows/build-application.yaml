name: Build & Deploy TorizonCore
on:
  - push

jobs:
  build-deploy:
    runs-on: ubuntu-24.04
    name: Build & Deploy
    container:
      image: ubuntu:24.04
    steps:
      - uses: actions/checkout@v4

      - name: Get Host Absolute Workspace Path
        run: |
          echo "${{ github.workspace }}" >> abs-path
          cat abs-path

      - name: Setup Xonsh
        run: |
          apt-get update
          apt-get install -y python3 python3-pip pipx
          bash ./.conf/setup-xonsh.sh
          ln -s /root/.local/bin/xonsh /usr/bin/xonsh

      - name: Update torizon-utils module
        run: |
          pipx inject -f xonsh ./.conf/pip/

      - name: Initial Setup
        shell: xonsh {0}
        env:
          TORIZON_ARCH: ""
          DOCKER_PSSWD: ${{ secrets.DOCKER_PSSWD }}
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
          PLATFORM_CLIENT_SECRET: ${{ secrets.PLATFORM_CLIENT_SECRET }}
          PLATFORM_CREDENTIALS: ${{ secrets.PLATFORM_CREDENTIALS }}
        run: |

          bash ./.conf/setup-xonsh.sh
          import os
          import json

          $RAISE_SUBPROC_ERROR = True
          $XONSH_SHOW_TRACEBACK = True
          $UPDATE_OS_ENVIRON = True

          with open(".vscode/settings.json") as f:
              settings = json.load(f)
              os.environ["TORIZON_ARCH"] = settings["torizon_arch"]
              if os.environ["TORIZON_ARCH"] == "aarch64":
                  os.environ["TORIZON_ARCH"] = "arm64"
              if os.environ["TORIZON_ARCH"] == "armhf":
                  os.environ["TORIZON_ARCH"] = "arm"

          with open(os.environ["GITHUB_ENV"], "a") as f:
              f.write(f"TORIZON_ARCH={os.environ['TORIZON_ARCH']}\n")

          xonsh ./.vscode/tasks.xsh run validate-pipeline-settings

      - name: Decode Credentials
        env:
          PLATFORM_CREDENTIALS: ${{ secrets.PLATFORM_CREDENTIALS }}
        run: |
          echo $PLATFORM_CREDENTIALS | base64 -d > credentials.zip

      - name: Create and Publish Image
        shell: xonsh {0}
        env:
          TASKS_ITERATIVE: "False"
          TASKS_OVERRIDE_ENV: "False"
          DOCKER_PSSWD: ${{ secrets.DOCKER_PSSWD }}
          DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
          PLATFORM_CLIENT_SECRET: ${{ secrets.PLATFORM_CLIENT_SECRET }}
        run: |
          env
          xonsh ./.vscode/tasks.xsh run docker-login
          xonsh ./.vscode/tasks.xsh run run-torizon-binfmt
          xonsh ./.vscode/tasks.xsh run tcb-platform-publish

      - name: Deploy Application
        shell: xonsh {0}
        env:
          TASKS_ITERATIVE: "False"
          TASKS_OVERRIDE_ENV: "False"
          PLATFORM_CLIENT_ID: ${{ secrets.PLATFORM_CLIENT_ID }}
          PLATFORM_CLIENT_SECRET: ${{ secrets.PLATFORM_CLIENT_SECRET }}
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          xonsh ./.vscode/tasks.xsh run platform-update-fleet

      - name: Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-prod
          path: |
            docker-compose.prod.yml
            docker-compose.prod.lock.yml
